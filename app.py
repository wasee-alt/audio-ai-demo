# app.py ‚Äî AI Audio Designer (Updated: Remove st_canvas, add wall speaker option)

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from PIL import Image
from io import BytesIO
import numpy as np
import math

st.set_page_config(page_title="AI Audio Designer", layout="centered")
st.image("https://proplugin.com/pub/media/logo/websites/1/logo.svg", width=200)
st.title("üéõÔ∏è ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI")

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
def load_product_database(path="audio_product_data.csv"):
    try:
        df = pd.read_csv(path)
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None

# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á
def suggest_speaker_positions(room_w, room_l, spacing):
    positions = []
    x = spacing / 2
    while x < room_w:
        y = spacing / 2
        while y < room_l:
            positions.append((x, y))
            y += spacing
        x += spacing
    return positions

# ‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å
def draw_layout(width, length, speakers, coverage_radius):
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.set_xlim(0, width)
    ax.set_ylim(0, length)
    ax.set_title("‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á")
    ax.set_xlabel("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡πÄ‡∏°‡∏ï‡∏£)")
    ax.set_ylabel("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡πÄ‡∏°‡∏ï‡∏£)")
    ax.set_aspect('equal')
    ax.grid(True, linestyle='--', alpha=0.5)
    ax.add_patch(patches.Rectangle((0, 0), width, length, linewidth=1, edgecolor='black', facecolor='whitesmoke'))
    for (x, y) in speakers:
        ax.add_patch(patches.Circle((x, y), coverage_radius, alpha=0.2, color='lightblue'))
        ax.plot(x, y, 'ro')
        ax.text(x + 0.2, y + 0.2, '‡∏•‡∏≥‡πÇ‡∏û‡∏á', fontsize=8)
    return fig

st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
with st.form("audio_form"):
    room_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", ["‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏î", "‡πÇ‡∏ö‡∏™‡∏ñ‡πå"])
    use_case = st.selectbox("‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á", ["‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (BGM)", "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î", "‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏™‡∏î", "‡∏î‡∏µ‡πÄ‡∏à / ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô"])
    speaker_mount = st.selectbox("‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á", ["‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏ï‡∏¥‡∏î‡πÄ‡∏û‡∏î‡∏≤‡∏ô (Ceiling)", "‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏û‡∏∑‡πâ‡∏ô / ‡πÅ‡∏Ç‡∏ß‡∏ô (Wall-mounted)"])
    room_width = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏°‡∏ï‡∏£)", min_value=1.0, value=12.0, step=0.1)
    room_length = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏°‡∏ï‡∏£)", min_value=1.0, value=20.0, step=0.1)
    spacing = st.slider("‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á (‡πÄ‡∏°‡∏ï‡∏£)", 2, 10, 6)
    budget = st.number_input("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)", min_value=0, value=100000, step=1000)
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏õ‡∏•‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)", type=["png", "jpg", "jpeg"])
    submitted = st.form_submit_button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á")

if submitted:
    st.success("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
    speakers = suggest_speaker_positions(room_width, room_length, spacing)

    st.subheader("üìç ‡∏ú‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á")
    coverage_radius = 2.5
    fig = draw_layout(room_width, room_length, speakers, coverage_radius)
    st.pyplot(fig)
    st.info(f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(speakers)} ‡∏ï‡∏±‡∏ß")

    df = load_product_database()
    if df is not None:
        st.subheader("üîä ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")

        if use_case == "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (BGM)":
            type_filter = "Ceiling" if "‡πÄ‡∏û‡∏î‡∏≤‡∏ô" in speaker_mount else "Wall"
            min_spl = 85
        elif use_case == "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î":
            type_filter = "Full-range"
            min_spl = 90
        elif use_case == "‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏™‡∏î":
            type_filter = "Full-range|Line Array"
            min_spl = 100
        elif use_case == "‡∏î‡∏µ‡πÄ‡∏à / ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ":
            type_filter = "Line Array|Subwoofer"
            min_spl = 105
        elif use_case == "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô":
            type_filter = "Ceiling|Paging"
            min_spl = 85
        else:
            type_filter = "Full-range"
            min_spl = 90

        filtered = df[df["Type"].str.contains(type_filter, case=False, na=False)]
        filtered = filtered[pd.to_numeric(filtered["Max SPL (dB)"], errors='coerce') >= min_spl]
        filtered = filtered.head(len(speakers))

        st.dataframe(filtered[["Model", "Brand", "Type", "Power (W)", "Coverage Angle", "Price (THB)", "Stock"]])
        total_cost = filtered["Price (THB)"].sum()
        st.metric("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", f"{total_cost:,.0f} ‡∏ö‡∏≤‡∏ó")
        if total_cost > budget:
            st.warning("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ")
        else:
            st.success("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    else:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ")
